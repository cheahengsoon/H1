name: GarudRecon + Nuclei Workflow

on:
  workflow_dispatch:

jobs:
  recon:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl unzip git python3 python3-pip jq parallel

      - name: Install GarudRecon
        run: |
          git clone --depth 1 https://github.com/rix4uni/GarudRecon.git
          chmod +x GarudRecon/garudrecon

      - name: Install Nuclei
        run: |
          latest_release=$(curl -s https://api.github.com/repos/projectdiscovery/nuclei/releases/latest | jq -r .tag_name)
          version="${latest_release#v}"
          download_url="https://github.com/projectdiscovery/nuclei/releases/download/${latest_release}/nuclei_${version}_linux_amd64.zip"
          curl -sSfL "$download_url" -o nuclei.zip
          unzip -o nuclei.zip nuclei
          sudo mv nuclei /usr/local/bin/
          nuclei -version

      - name: Run GarudRecon on domain list
        run: |
          mkdir -p output/domains output/errors
          cd GarudRecon
          while IFS= read -r domain; do
            echo "[*] Running GarudRecon for $domain"
            if bash garudrecon -d "$domain" -o "../output/domains/$domain.txt"; then
              echo "[+] GarudRecon completed for $domain"
            else
              echo "[-] GarudRecon failed for $domain"
              echo "$domain" >> ../output/errors/garudrecon_failed.log
            fi
          done < ../Input/domains.txt
          cd ..

      - name: Run Nuclei on GarudRecon results
        run: |
          mkdir -p output/nuclei
          for f in output/domains/*.txt; do
            domain=$(basename "$f" .txt)
            echo "[*] Running Nuclei scan on $domain..."
            if nuclei -l "$f" -severity critical,high,medium,low -o "output/nuclei/${domain}_nuclei.txt"; then
              echo "[+] Nuclei completed for $domain"
            else
              echo "[-] Nuclei failed for $domain"
              echo "$domain" >> output/errors/nuclei_failed.log
            fi
          done

      - name: Generate summary report
        run: |
          mkdir -p output/summary
          REPORT="output/summary/report.txt"
          echo "=== GarudRecon + Nuclei Summary Report ===" > "$REPORT"

          echo -e "\n[GarudRecon Failed]" >> "$REPORT"
          if [ -f output/errors/garudrecon_failed.log ]; then
            cat output/errors/garudrecon_failed.log >> "$REPORT"
          else
            echo "None" >> "$REPORT"
          fi

          echo -e "\n[Nuclei Results]" >> "$REPORT"
          for f in output/nuclei/*.txt; do
            echo "--- $(basename "$f") ---" >> "$REPORT"
            cat "$f" >> "$REPORT"
          done

          echo -e "\n[Nuclei Failed]" >> "$REPORT"
          if [ -f output/errors/nuclei_failed.log ]; then
            cat output/errors/nuclei_failed.log >> "$REPORT"
          else
            echo "None" >> "$REPORT"
          fi

      - name: Commit and push results
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add output/
          git commit -m "Update GarudRecon + Nuclei results with summary"
          git push
