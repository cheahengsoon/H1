name: GarudRecon + Nuclei Workflow

on:
  workflow_dispatch: # Manual trigger

jobs:
  recon:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl unzip git python3 python3-pip jq parallel

      - name: Install GarudRecon
        run: |
          git clone --depth 1 https://github.com/rix4uni/GarudRecon.git
          cd GarudRecon
          bash configure
          chmod +x garudrecon

      - name: Install Nuclei
        run: |
          latest_release=$(curl -s https://api.github.com/repos/projectdiscovery/nuclei/releases/latest | jq -r .tag_name)
          version="${latest_release#v}"
          download_url="https://github.com/projectdiscovery/nuclei/releases/download/${latest_release}/nuclei_${version}_linux_amd64.zip"
          curl -sSfL "$download_url" -o nuclei.zip
          unzip -o nuclei.zip nuclei
          sudo mv nuclei /usr/local/bin/
          nuclei -version

      - name: Run GarudRecon + Nuclei Workflow
        run: |
          set -euo pipefail
          DOMAIN_LIST="Input/domains.txt"
          OUTPUT_DIR="output/domains"
          ERROR_DIR="output/errors"
          NUCLEI_DIR="output/nuclei"
          SUMMARY_DIR="output/summary"

          mkdir -p "$OUTPUT_DIR" "$ERROR_DIR" "$NUCLEI_DIR" "$SUMMARY_DIR"
          chmod +x ./GarudRecon/garudrecon

          scan_domain() {
              domain="$1"
              outfile="$OUTPUT_DIR/$domain.txt"
              errfile="$ERROR_DIR/$domain.err"
              echo "[*] Scanning $domain with GarudRecon..."
              if ./GarudRecon/garudrecon largescope "$domain" -o "$outfile" 2>"$errfile"; then
                  echo "[+] GarudRecon succeeded for $domain"
              else
                  echo "[-] GarudRecon failed for $domain, retrying once..."
                  if ! ./GarudRecon/garudrecon largescope "$domain" -o "$outfile" 2>>"$errfile"; then
                      echo "[-] Final failure for $domain"
                      echo "$domain" >> "$ERROR_DIR/garudrecon_failed.log"
                  fi
              fi
          }
          export -f scan_domain
          export OUTPUT_DIR ERROR_DIR
          cat "$DOMAIN_LIST" | parallel -j 5 scan_domain {}

          echo "=== GarudRecon scanning complete ==="

          for f in "$OUTPUT_DIR"/*.txt; do
              domain=$(basename "$f" .txt)
              echo "[*] Running Nuclei scan on results from $domain..."
              if nuclei -l "$f" -severity critical,high,medium,low -o "$NUCLEI_DIR/${domain}_nuclei.txt"; then
                  echo "[+] Nuclei completed for $domain"
              else
                  echo "[-] Nuclei failed for $domain"
                  echo "$domain" >> "$ERROR_DIR/nuclei_failed.log"
              fi
          done

          REPORT="$SUMMARY_DIR/report.txt"
          echo "=== GarudRecon + Nuclei Summary Report ===" > "$REPORT"

          echo -e "\n[GarudRecon Success]" >> "$REPORT"
          for f in "$OUTPUT_DIR"/*.txt; do
              domain=$(basename "$f" .txt)
              if ! grep -q "$domain" "$ERROR_DIR/garudrecon_failed.log" 2>/dev/null; then
                  echo "$domain" >> "$REPORT"
              fi
          done

          echo -e "\n[GarudRecon Failed]" >> "$REPORT"
          if [ -f "$ERROR_DIR/garudrecon_failed.log" ]; then
              cat "$ERROR_DIR/garudrecon_failed.log" >> "$REPORT"
          else
              echo "None" >> "$REPORT"
          fi

          echo -e "\n[Nuclei Results]" >> "$REPORT"
          for f in "$NUCLEI_DIR"/*.txt; do
              echo "--- $(basename "$f") ---" >> "$REPORT"
              cat "$f" >> "$REPORT"
          done

          echo -e "\n[Nuclei Failed]" >> "$REPORT"
          if [ -f "$ERROR_DIR/nuclei_failed.log" ]; then
              cat "$ERROR_DIR/nuclei_failed.log" >> "$REPORT"
          else
              echo "None" >> "$REPORT"
          fi

          echo "=== Workflow Finished ==="
          echo "Report saved at: $REPORT"

      - name: Commit and push results
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add output/
          git commit -m "Update GarudRecon + Nuclei results with summary"
          git push
