name: Nuclei - Per Domain Scan

on:
  workflow_dispatch:
    inputs:
      severity:
        description: "Global severity levels (default: critical,high,medium,low)"
        required: false
        default: "critical,high,medium,low"
      threads:
        description: "Number of concurrent threads per domain (default: 20)"
        required: false
        default: "20"
      rate_limit:
        description: "Rate limit requests per second (default: 50)"
        required: false
        default: "50"
      timeout:
        description: "Timeout per domain scan in minutes (default: 10)"
        required: false
        default: "10"
      output_folder:
        description: "Folder to save results (default: result)"
        required: false
        default: "result"
  push:
    branches:
      - main

jobs:
  nuclei:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Install Nuclei
        run: |
          go install github.com/projectdiscovery/nuclei/v3/cmd/nuclei@latest
          echo "$HOME/go/bin" >> $GITHUB_PATH
          nuclei -version

      - name: Ensure output folder exists
        run: mkdir -p "${{ github.event.inputs.output_folder || 'result' }}"

      - name: Cache Nuclei Templates
        uses: actions/cache@v3
        with:
          path: ~/.nuclei-templates
          key: nuclei-templates-${{ runner.os }}
          restore-keys: |
            nuclei-templates-

      - name: Update Nuclei templates
        run: nuclei -update-templates

      - name: Run Nuclei Scans Sequentially (Alphabetical, with Retry & Skip)
        continue-on-error: true
        run: |
          OUTPUT_FOLDER=${{ github.event.inputs.output_folder || 'result' }}
          DEFAULT_SEVERITY=${{ github.event.inputs.severity || 'critical,high,medium,low' }}
          THREADS=${{ github.event.inputs.threads || 20 }}
          RATE_LIMIT=${{ github.event.inputs.rate_limit || 50 }}
          TIMEOUT=${{ github.event.inputs.timeout || 10 }}
          MAX_RETRIES=2

          OVERRIDES_FILE=$(mktemp)
          if [[ -f nuclei-domain-overrides.csv ]]; then
            tail -n +2 nuclei-domain-overrides.csv >> "$OVERRIDES_FILE"
          fi

          SCANNED_LIST="$OUTPUT_FOLDER/scanned.txt"
          mkdir -p "$OUTPUT_FOLDER"
          : > "$SCANNED_LIST"
          : > "$OUTPUT_FOLDER/unscanned.txt"

          # Initialize fresh global severity files
          for sev in critical high medium low; do
            : > "${OUTPUT_FOLDER}/all_${sev}.txt"
          done

          run_scan() {
            file="$1"
            domain=$(basename "$file" _live.txt)
            SEVERITY="$DEFAULT_SEVERITY"

            if [[ -f "$OVERRIDES_FILE" ]]; then
              line=$(grep -E "^$domain," "$OVERRIDES_FILE" || true)
              if [[ -n "$line" ]]; then
                IFS=, read -r _ _ severity <<< "$line"
                [[ -n "$severity" ]] && SEVERITY="$severity"
              fi
            fi

            attempt=0
            success=0
            while [[ $attempt -le $MAX_RETRIES ]]; do
              echo "[*] Scanning $domain (attempt $((attempt+1))/$((MAX_RETRIES+1)))..."
              if timeout "${TIMEOUT}m" nuclei -l "$file" \
                  -severity "$SEVERITY" \
                  -c "$THREADS" \
                  -rl "$RATE_LIMIT" \
                  -o "${OUTPUT_FOLDER}/${domain}_nuclei_all.txt"; then

                URL_COUNT=$(grep -c "http" "${OUTPUT_FOLDER}/${domain}_nuclei_all.txt" || true)
                if [[ $URL_COUNT -gt 0 ]]; then
                  # Split results into per-severity files
                  for sev in critical high medium low; do
                    grep -i "\[$sev\]" "${OUTPUT_FOLDER}/${domain}_nuclei_all.txt" \
                      | sed "s|^|[$domain] |" > "${OUTPUT_FOLDER}/${domain}_nuclei_${sev}.txt" || true

                    grep -i "\[$sev\]" "${OUTPUT_FOLDER}/${domain}_nuclei_all.txt" \
                      | sed "s|^|[$domain] |" >> "${OUTPUT_FOLDER}/all_${sev}.txt" || true

                    [[ ! -s "${OUTPUT_FOLDER}/${domain}_nuclei_${sev}.txt" ]] && rm -f "${OUTPUT_FOLDER}/${domain}_nuclei_${sev}.txt"
                  done

                  [[ ! -s "${OUTPUT_FOLDER}/${domain}_nuclei_all.txt" ]] && rm -f "${OUTPUT_FOLDER}/${domain}_nuclei_all.txt"
                  echo "$file" >> "$SCANNED_LIST"
                  success=1
                  break
                else
                  echo "[-] No URLs found for $domain"
                fi
              else
                echo "[-] Scan failed or timed out for $domain"
              fi
              attempt=$((attempt+1))
              sleep 10
            done

            if [[ $success -eq 0 ]]; then
              echo "[-] Domain $domain failed all attempts, skipping but logged"
              echo "$file" >> "${OUTPUT_FOLDER}/unscanned.txt"
            fi
          }

          export -f run_scan
          export OUTPUT_FOLDER DEFAULT_SEVERITY THREADS RATE_LIMIT OVERRIDES_FILE TIMEOUT SCANNED_LIST MAX_RETRIES

          # Sequential alphabetical scan
          find live -name '*_live.txt' | sort | while read -r file; do
              run_scan "$file"
          done

      - name: List Unscanned Live Files
        run: |
          OUTPUT_FOLDER=${{ github.event.inputs.output_folder || 'result' }}
          if [[ -s "$OUTPUT_FOLDER/unscanned.txt" ]]; then
            echo "=== ⚠ Some domains could not be scanned after retries ==="
            cat "$OUTPUT_FOLDER/unscanned.txt"
          else
            echo "=== ✅ All domains scanned successfully ==="
          fi

      - name: Upload Nuclei Results Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: nuclei-results-${{ github.sha }}-${{ github.ref_name }}
          path: "${{ github.event.inputs.output_folder || 'result' }}/"

      - name: Upload Unscanned List Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: nuclei-unscanned-${{ github.sha }}-${{ github.ref_name }}
          path: "${{ github.event.inputs.output_folder || 'result' }}/unscanned.txt"

      - name: Commit and Push Scan Results
        run: |
          OUTPUT_FOLDER=${{ github.event.inputs.output_folder || 'result' }}
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"

          # Stage only non-empty .txt results
          find "$OUTPUT_FOLDER" -type f -name "*.txt" -size +0c -exec git add {} \;

          # Commit if there are changes
          git diff --cached --quiet || git commit -m "Update Nuclei scan results"

          git fetch origin main
          git rebase origin/main
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
