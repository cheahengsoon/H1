name: Nuclei - Per Domain Scan with Safe PoC

on:
  workflow_dispatch:
    inputs:
      severity:
        description: "Global severity levels (default: critical,high,medium,low)"
        required: false
        default: "critical,high,medium,low"
      threads:
        description: "Concurrent threads per domain (default: 20)"
        required: false
        default: "20"
      parallel_domains:
        description: "Number of domains scanned in parallel (default: 2)"
        required: false
        default: "2"
      rate_limit:
        description: "Max requests per second per domain (optional, default: 50)"
        required: false
        default: "50"
      timeout:
        description: "Timeout per domain in minutes (default: 10)"
        required: false
        default: "10"
      output_folder:
        description: "Folder to save results (default: result)"
        required: false
        default: "result"
  push:
    branches:
      - main

jobs:
  nuclei:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Install Nuclei
        run: |
          go install github.com/projectdiscovery/nuclei/v3/cmd/nuclei@latest
          echo "$HOME/go/bin" >> $GITHUB_PATH
          nuclei -version

      - name: Ensure output folder exists
        run: mkdir -p "${{ github.event.inputs.output_folder || 'result' }}"

      - name: Cache Nuclei Templates
        uses: actions/cache@v3
        with:
          path: ~/.nuclei-templates
          key: nuclei-templates-${{ runner.os }}
          restore-keys: |
            nuclei-templates-

      - name: Update Nuclei templates
        run: nuclei -update-templates || true

      - name: Run Nuclei Scans in Parallel
        continue-on-error: true
        run: |
          OUTPUT_FOLDER=${{ github.event.inputs.output_folder || 'result' }}
          DEFAULT_SEVERITY=${{ github.event.inputs.severity || 'critical,high,medium,low' }}
          THREADS=${{ github.event.inputs.threads || 20 }}
          PARALLEL=${{ github.event.inputs.parallel_domains || 2 }}
          RATE_LIMIT=${{ github.event.inputs.rate_limit || 50 }}
          TIMEOUT=${{ github.event.inputs.timeout || 10 }}

          OVERRIDES_FILE=$(mktemp)
          if [[ -f nuclei-domain-overrides.csv ]]; then
            tail -n +2 nuclei-domain-overrides.csv >> "$OVERRIDES_FILE"
          fi

          run_scan() {
            file="$1"
            domain=$(basename "$file" _live.txt)
            SEVERITY="$DEFAULT_SEVERITY"

            if [[ -f "$OVERRIDES_FILE" ]]; then
              line=$(grep -E "^$domain," "$OVERRIDES_FILE" || true)
              if [[ -n "$line" ]]; then
                IFS=, read -r _ _ severity <<< "$line"
                [[ -n "$severity" ]] && SEVERITY="$severity"
              fi
            fi

            echo "[*] Scanning $domain with threads=$THREADS, rate-limit=$RATE_LIMIT/sec, timeout=${TIMEOUT}m..."
            timeout "${TIMEOUT}m" nuclei -l "$file" \
              -severity "$SEVERITY" \
              -c "$THREADS" \
              -rl "$RATE_LIMIT" \
              -o "${OUTPUT_FOLDER}/${domain}_nuclei.txt" \
              -o "${OUTPUT_FOLDER}/${domain}_nuclei.json" \
              || echo "[-] Scan failed or timed out for $domain, continuing..."
          }

          export -f run_scan
          export OUTPUT_FOLDER DEFAULT_SEVERITY THREADS PARALLEL RATE_LIMIT OVERRIDES_FILE TIMEOUT

          find live -name '*_live.txt' | xargs -P "$PARALLEL" -I {} bash -c 'run_scan "$@"' _ {}

      - name: Generate Safe/Dry-Run PoC Scripts
        run: |
          OUTPUT_FOLDER=${{ github.event.inputs.output_folder || 'result' }}
          POC_DIR="${OUTPUT_FOLDER}/poCs"
          mkdir -p "$POC_DIR"

          for file in $OUTPUT_FOLDER/*_nuclei.json; do
            jq -c '.[] | select(.info.severity=="critical" or .info.severity=="high")' "$file" | while read -r finding; do
              url=$(echo "$finding" | jq -r '.host')
              method=$(echo "$finding" | jq -r '.matched[0].request.method // "GET"')
              path=$(echo "$finding" | jq -r '.matched[0].request.path // "/"')
              data=$(echo "$finding" | jq -r '.matched[0].request.body // ""')
              headers=$(echo "$finding" | jq -r '.matched[0].request.headers | to_entries[] | "-H \""+"\(.key): \(.value)"\""' 2>/dev/null)

              template=$(echo "$finding" | jq -r '.template_id')
              domain=$(basename "$file" _nuclei.json)

              poc_file="$POC_DIR/${domain}_${template}.sh"
              echo "#!/bin/bash" > "$poc_file"
              echo "# Safe dry-run PoC: command is echoed but not executed" >> "$poc_file"
              echo "echo 'curl -X $method $headers \"$url$path\" -d \"$data\"'" >> "$poc_file"
              chmod +x "$poc_file"
            done
          done

      - name: Commit and Push Results & PoCs
        run: |
          OUTPUT_FOLDER=${{ github.event.inputs.output_folder || 'result' }}
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"

          find "${OUTPUT_FOLDER}" -type f \( -name "*.txt" -o -name "*.json" -o -name "*.sarif" -o -name "*.sh" \) -exec git add {} +

          git diff --cached --quiet || git commit -m "Update Nuclei scan results and safe PoCs"
          git fetch origin main
          git rebase origin/main
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Nuclei Results and Safe PoCs Artifact
        uses: actions/upload-artifact@v4
        with:
          name: nuclei-results-and-safe-pocs-${{ github.sha }}-${{ github.ref_name }}
          path: "${{ github.event.inputs.output_folder || 'result' }}/"
