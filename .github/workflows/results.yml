name: Nuclei - Alphabetical Parallel Scan

on:
  workflow_dispatch:
    inputs:
      threads:
        description: "Concurrent threads per domain (default: 20)"
        required: false
        default: "20"
      parallel_domains:
        description: "Number of domains to scan in parallel (default: 5)"
        required: false
        default: "5"
      rate_limit:
        description: "Rate limit requests per second (default: 50)"
        required: false
        default: "50"
      timeout:
        description: "Timeout per domain scan in minutes (default: 10)"
        required: false
        default: "10"
      output_folder:
        description: "Folder to save results (default: result)"
        required: false
        default: "result"
  push:
    branches:
      - main

jobs:
  nuclei:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Install Nuclei
        run: |
          go install github.com/projectdiscovery/nuclei/v3/cmd/nuclei@latest
          echo "$HOME/go/bin" >> $GITHUB_PATH
          nuclei -version

      - name: Ensure output folder exists
        run: mkdir -p "${{ github.event.inputs.output_folder || 'result' }}"

      - name: Cache Nuclei Templates
        uses: actions/cache@v3
        with:
          path: ~/.nuclei-templates
          key: nuclei-templates-${{ runner.os }}
          restore-keys: |
            nuclei-templates-

      - name: Update Nuclei Templates
        run: nuclei -update-templates

      - name: Scan Live Domains Alphabetically in Parallel
        continue-on-error: true
        run: |
          OUTPUT_FOLDER=${{ github.event.inputs.output_folder || 'result' }}
          THREADS=${{ github.event.inputs.threads || 20 }}
          PARALLEL=${{ github.event.inputs.parallel_domains || 5 }}
          RATE_LIMIT=${{ github.event.inputs.rate_limit || 50 }}
          TIMEOUT=${{ github.event.inputs.timeout || 10 }}
          MAX_RETRIES=2

          mkdir -p "$OUTPUT_FOLDER"
          : > "$OUTPUT_FOLDER/scanned.txt"
          : > "$OUTPUT_FOLDER/unscanned.txt"

          scan_domain() {
            file="$1"
            domain=$(basename "$file" _live.txt)
            attempt=0
            success=0

            while [[ $attempt -le $MAX_RETRIES ]]; do
              echo "[*] Scanning $domain (attempt $((attempt+1))/$((MAX_RETRIES+1)))..."
              if timeout "${TIMEOUT}m" nuclei -l "$file" \
                 -severity critical,high,medium,low \
                 -c "$THREADS" \
                 -rl "$RATE_LIMIT" \
                 -o "${OUTPUT_FOLDER}/${domain}_nuclei.txt"; then
                 
                 if [[ -s "${OUTPUT_FOLDER}/${domain}_nuclei.txt" ]]; then
                   echo "$file" >> "$OUTPUT_FOLDER/scanned.txt"
                   success=1
                   break
                 else
                   echo "[-] No results for $domain"
                 fi
              else
                 echo "[-] Scan timed out for $domain"
              fi
              attempt=$((attempt+1))
              sleep 5
            done

            if [[ $success -eq 0 ]]; then
              echo "$file" >> "$OUTPUT_FOLDER/unscanned.txt"
            fi
          }

          export -f scan_domain
          export OUTPUT_FOLDER THREADS RATE_LIMIT TIMEOUT MAX_RETRIES

          # Find live domains alphabetically and scan in parallel
          find live -name '*_live.txt' | sort | xargs -n 1 -P "$PARALLEL" -I {} bash -c 'scan_domain "$@"' _ {}

      - name: List Unscanned Domains
        run: |
          OUTPUT_FOLDER=${{ github.event.inputs.output_folder || 'result' }}
          if [[ -s "$OUTPUT_FOLDER/unscanned.txt" ]]; then
            echo "=== ⚠ Some domains could not be scanned ==="
            cat "$OUTPUT_FOLDER/unscanned.txt"
          else
            echo "=== ✅ All domains scanned successfully ==="
          fi

      - name: Commit Non-Empty Results
        if: always()
        run: |
          OUTPUT_FOLDER=${{ github.event.inputs.output_folder || 'result' }}
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"

          # Stage only non-empty .txt files
          find "$OUTPUT_FOLDER" -type f -name "*.txt" -size +0c -exec git add {} \;

          # Commit changes only if there are results
          git diff --cached --quiet || git commit -m "Update Nuclei scan results"

          git fetch origin main
          git rebase origin/main
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Results Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: nuclei-results-${{ github.sha }}-${{ github.ref_name }}
          path: "${{ github.event.inputs.output_folder || 'result' }}/"
